pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        AWS_OUTPUT_FORMAT = 'json'
        CHART_NAME = 'myapp_nginx'
        CHART_VERSION = '${BUILD_NUMBER}'
        ECR_REPOSITORY = '095919053879.dkr.ecr.us-east-1.amazonaws.com'
    }
    
    stages {

        stage('Pull helm chart from ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr-access-key', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                    sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                    sh 'aws configure set default.region $AWS_REGION'
                    sh 'aws configure set default.output $AWS_OUTPUT_FORMAT'
                }
            }
        }

        stage("pull helm package") {
            steps {
                sh "aws ecr get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin ${ECR_REPOSITORY}"
                sh "helm pull oci://${ECR_REPOSITORY}/${CHART_NAME}:42"
                // sh "helm pull oci://${ECR_REPOSITORY}/${CHART_NAME}-${CHART_VERSION}:${params.buildnum}  --untar"
                sh 'helm logout'
            }
        }

        stage("Deploy to Minikube") {
            steps {
                sh 'helm upgrade --install ${CHART_NAME} --version 40 ${CHART_NAME}'
                // sh 'helm upgrade --install mavenhelm --version {params.buildnum} mavenhelm'
                // sh 'minikube kubectl get po -A'
            }
        }

	}
}